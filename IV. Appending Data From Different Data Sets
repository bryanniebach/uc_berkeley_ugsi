{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Run this cell\n",
    "from datascience import *\n",
    "import pandas as pd \n",
    "from pandas import read_stata\n",
    "import numpy as np\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "matplotlib.use('Agg', warn=False)\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plots\n",
    "plots.style.use('fivethirtyeight')\n",
    "import warnings\n",
    "warnings.simplefilter(action=\"ignore\", category=FutureWarning)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lab 2A - Appending Data From Different Data Sets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this lab, we will be using data from different sources so that it can be merged into a single data set.\n",
    "\n",
    "Part 1 of the lab requires very little, if any, work in in Python. Instead, Part 1 involves evaluating the data in two different data sets and determining which variables can be retained, how those variables need to be recoded, and what format the data will need to be in so that you can append one data set to the other.\n",
    "\n",
    "Part 2 of the lab will involve using the analysis conducted in Part 1 of the lab to append the two data sets."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Background of Appending Data vs. Merging Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Appending data and merging data are two important functions used in managing data. Both functions involve combining different datasets to create a single dataset. I use the terms merge and append to distinguish these two functions. While others may use different terms, the distinctions between the functions are important and will still be valid regardless of what you call it.\n",
    "\n",
    "• **Merging Data** – refers to adding new columns to a data set. For example, if you have personal information about the age or race of people who died in-custody in one data set and information about the location or facility in which the same people died in another data set, you could merge the data to conduct analyses that take into account information from both of the data sets.\n",
    "\n",
    "To add additional columns, you need to match the new information to the correct row. This means that there needs to be a ***key*** variable of some kind that is shared in both of the data sets. The key variable is a unique identifier of some kind and, thus, allows you to match the observations (the rows) of one data set with the corresponding information for those same observations contained in the other data set.\n",
    "\n",
    "• **Appending Data** – refers to adding new rows to a data set. For example, if you have multiple data sets from different states with information on people who died in custody, you can append the data from one or more different data sets to create a single, multi-state data set.\n",
    "\n",
    "When you append data, you need to match the variables across the different data sets. This involves ensuring that the data sets contain the same variables, that the matched variables have the same names, are located in the same position in the data set, and have the same format."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## I. Evaluate Two Data Sets In Advance of Appending"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The two data sets you will use for this lab are the following: (1) Texas Custodial Death (2) California Department of Justice In Custody & Arrest Related. \n",
    "\n",
    "Note: In the description of the exercise, below, I try to use the term “variable” consistently. Outside of this exercise, though, it’s likely that I will also use the term “data element” interchangeably with “variable”."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Review the variables in the two datasets and think about how you could combine the two data sets into one. The issues that you need to think about in reviewing the variables are the following questions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 1: Which variables are common to both data sets?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Written Response:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 2: Which variables are similar but not identical?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Written Response:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 3: Is there information in the data sets that would allow you to calculate a variable so that\n",
    "it matches the other data set?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Written Response: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 4: Is there other information (available on the web) that you might be able to add to the\n",
    "mix to make the two data sets more similar?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Written Response:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before merging and appending different tables, Python follows strict rules. More specifically, you can only combine tables with the same amount of columns. However, you can combine different table with varying lengths of rows. For example, Table A is 4x10 (4 columns, 10 rows), while Table B is 4x20 (4 columns, 20 rows)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 5: True/False: If Table A is 10x5 and Table B is 5x10, then both of these tables can the be combined."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Written Response:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 6: List all the column labels in the CA data that are not located in the Texas data. For example, the column 'county' is in CA data, but not located in the Texas data. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Written Response:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 7: List all the column labels in the Texas data that are not located in the CA data. For example, the column 'First name' is in Texas data, but not located in the CA data. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Written Response:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## II. Apply Merge & Append Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we have two data sets, we will classify the following data sets as follows: \n",
    "\n",
    "(1) **Table A** = Texas data\n",
    "\n",
    "(2) **Table B** = CA data\n",
    "\n",
    "We are now going to create a table that describes as succinctly as possible the following: \n",
    "\n",
    ">(a) the variables that the two datasets have in common or that could be the same with a little work \n",
    "\n",
    ">(b) any variables that could be calculated to increase the number of variables that the two datasets share \n",
    "\n",
    ">(c) any renaming of variables that would need to be done prior to appending the data sets \n",
    "\n",
    ">(d) any re-coding or dropping of information that would need to be done prior to appending the data sets \n",
    "\n",
    ">(e) any additional information that might be added (appended) to the data set to make the data sets more similar"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 8: Import the two different data sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Import Texas data, cleaned version\n",
    "texas_data = ***INSERT TABLE FUNCTION***('***INSERT FILE NAME***', ***INSERT CLEANNING CODE***)\n",
    "texas_data.show(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Import CA data\n",
    "ca_data = ***INSERT TABLE FUNCTION***('***INSERT FILE NAME***')\n",
    "ca_data.show(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Convert the Texas 'Death Date' column into three seperate columns\n",
    "temp_df = texas_data.to_df()\n",
    "temp_df['***COLUMN NAME***']***INSERT REPLACE FUNCTION***('***VALUE BEING REPLACED***', '1000-01-01 00:00:00', inplace=True)\n",
    "texas_data = Table().from_df(temp_df)\n",
    "\n",
    "#Making a function that takes a string date and returns a datetime object\n",
    "apply_datetime = lambda x: datetime.datetime***INSERT STRIP TIME CODE***(x, \"***INSERT DISPLAYED FORMAT***\")\n",
    "\n",
    "#Apply that function\n",
    "datetime_objects = texas_data***INSERT CODE TO APPLY FUNCTION***(apply_datetime, '***COLUMN NAME***')\n",
    "\n",
    "#Adding the objects as a new column\n",
    "texas_data = texas_data.with_column('***COLUMN NAME***', datetime_objects)\n",
    "\n",
    "#Apply functions to make new columns\n",
    "texas_data['***COLUMN NAME***'] = ***INSERT FUNCTION***(lambda x: x.time(), datetime_objects)\n",
    "texas_data['***COLUMN NAME***'] = ***INSERT FUNCTION***(lambda x: x.month, datetime_objects)\n",
    "texas_data['***COLUMN NAME***'] = ***INSERT FUNCTION***(lambda x: x.day, datetime_objects)\n",
    "texas_data['***COLUMN NAME***'] = ***INSERT FUNCTION***(lambda x: x.year, datetime_objects)\n",
    "texas_data.show(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Drop unecessary information, such as duplicated information\n",
    "texas_data = texas_data***INSERT DROP CODE***('***COLUMN NAME***', '***COLUMN NAME***', '***COLUMN NAME***')\n",
    "texas_data.show(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 9: Using Table A, relabel the column names to match Table B. Try to append as many variables as possible, you do not want to lose information. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For example, \n",
    "\n",
    "\n",
    ">1) For the “gender” variable I have simply noted in the first table that each data set has 2 values, and that they both code the values as “Male” and “Female.” Note, however, that the data sets use a different name for the variable – Texas data calls this variable “sex” while CA data calls this variable “Gender”  – so you will need to note what the new, common name for the variable will be. \n",
    "\n",
    ">2) For the “race” variable, as with the gender variable, we have different names. Unlike the gender variable, though, I have very different values. The Texas data has 8 values, while the CA data set has 20 distinct values. \n",
    "\n",
    "Note: Python is extremely picky, you must caution capital letters, spaces, punctuation, etc. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Relabel all Texas column labels to match CA column labels\n",
    "relabeled_texas_data = texas_data***INSERT RELABEL FUNCTION***('***INSERT OLD LABEL***', '***INSERT NEW LABEL***') \\\n",
    ".relabeled('***INSERT OLD LABEL***', '***INSERT NEW LABEL***')\\\n",
    ".relabeled('***INSERT OLD LABEL***', '***INSERT NEW LABEL***' )\\\n",
    ".relabeled('***INSERT OLD LABEL***', '***INSERT NEW LABEL***')\\\n",
    ".relabeled('***INSERT OLD LABEL***', '***INSERT NEW LABEL***')\\\n",
    ".relabeled('***INSERT OLD LABEL***', '***INSERT NEW LABEL***')\n",
    "relabeled_texas_data.show(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 10: Generate the maximum column length according to an arbituary Texas data column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Make the length of the Texas column of a random column\n",
    "texas_length = ***INSERT RANGE CODE***(***INSERT LEN CODE***(relabeled_texas_data[\"***INSERT COLUMN NAME***\"]))\n",
    "texas_length"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 11: Create a for loop that iterates through each row and inserts null values for empty values in Table A."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#State all the column labels that will have null values \n",
    "null = ['null' for i in ***INSERT LENGTH VALUE***]\n",
    "strings = ['***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', \\\n",
    "           '***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', \\\n",
    "           '***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', \\\n",
    "           '***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', \\\n",
    "           '***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***']\n",
    "\n",
    "#For loop of inserting null values in Table A\n",
    "for i in ***INSERT VALUE***:\n",
    "    relabeled_texas_data[i] = ***INSERT VALUE TO BE EQUALED TO****"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 12: Generate the maximum column length according to an arbituary CA data column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Make the length of the CA column of a random column\n",
    "ca_length = ***INSERT RANGE CODE***(***INSERT LEN CODE***(ca_data[\"***INSERT COLUMN NAME***\"]))\n",
    "ca_length"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 13: Create a for loop that iterates through each row and inserts null values for empty values in Table B."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#For loop of inserting null values in Table B\n",
    "null = ['null' for i in ***INSERT LENGTH VALUE***]\n",
    "strings = ['***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', \\\n",
    "           '***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', \\\n",
    "           '***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', '***INSERT COLUMN NAME***', \\\n",
    "           '***INSERT COLUMN NAME***']\n",
    "\n",
    "for i in ***INSERT VALUE***:\n",
    "    ca_data[i] =  ***INSERT VALUE TO BE EQUALED TO****"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 14: Make a new column at the end of Table A to state the original source of Texas data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "relabeled_texas_data['***INSERT NEW COLUMN NAME***'] = [\"Texas\" for i in ***INSERT VALUE***]\n",
    "relabeled_texas_data.show(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 15: Make a new column at the end of Table B to state the original source of CA data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Create a new column for source of data\n",
    "ca_data['***INSERT NEW COLUMN NAME***'] = [\"CA\" for i in ***INSERT VALUE***]\n",
    "ca_data.show(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 16: Create a for loop to append the source of Texas data to CA data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#For loop for combined source data\n",
    "combined_labels = ca_data.labels\n",
    "\n",
    "new_list = ***INSERT EMPTY LIST VALUE***\n",
    "for i in ***INSERT VALUE***:\n",
    "    column = ***INSERT SECOND EMPTY LIST VALUE***\n",
    "    column***INSERT EXTEND CODE***(relabeled_texas_data[i])\n",
    "    column***INSERT EXTEND CODE***(ca_data[i])\n",
    "    new_list***INSERT APPEND CODE***(column)\n",
    "column"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"Blue\"> Item 17: Create a for loop to append both Table A & Table B."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Combine the two tables, Table A & Table B\n",
    "combined_data = ***CREATE A EMPTY TABLE***\n",
    "\n",
    "for i in ***INSERT RANGE CODE***(***INSERT LEN CODE***(combined_labels)):\n",
    "    combined_data[combined_labels[i]] = ***INSERT LIST TO BE EQUALED TO***\n",
    "combined_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Congradulations you finished Lab 2A! "
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda env:ds]",
   "language": "python",
   "name": "conda-env-ds-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
